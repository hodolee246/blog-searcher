spring:
  datasource:
    url: jdbc:h2:./circuit
    driver-class-name: org.h2.Driver
    username: sa
    password: 1234

  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
#    defer-datasource-initialization: true

  h2:
    console:
      enabled: true

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10  # 최근 10개 요청을 기준으로 실패율을 계산
        failureRateThreshold: 50  # 50% 이상 실패하면 서킷 오픈
        waitDurationInOpenState: 10s  # 서킷이 열린 후 10초 동안 닫히지 않고 대기
    instances:
      caller:
        baseConfig: default  # 위에서 정의한 default 설정을 적용

#external data
blog:
  search:
    kakao:
      apiUri: https://dapi.kakao.com/v2/search/blog
      apiKey: 88e92474ef68c4e8d97a02aa07777352

    naver:
      apiUri: https://openapi.naver.com/v1/search/blog.json
      clientId: ddEMQzJuBE9jZft8LU63
      clientSecret: TTSomaV6A_

redis:
  address: redis://localhost:6379

  kafka:
    bootstrap-servers: localhost:9092  # Kafka 브로커 서버
    producer:
      retries: 3  # 메시지 전송 실패 시 재시도 횟수
      acks: all  # 메시지가 정상적으로 처리되었는지 확인하는 옵션
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: search-history-group  # Consumer가 속한 그룹 ID
      auto-offset-reset: earliest  # Consumer가 처리할 메시지의 시작 지점 설정 (earliest: 처음부터)
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer